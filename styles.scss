$primary-color: #3498db;
$button-hover-color: #2980b9;

body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

.container {
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
}

h1 {
    color: $primary-color;
}

p {
    font-size: 1.2em;
}

.order-button {
    display: inline-block;
    padding: 10px 20px;
    background-color: $primary-color;
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    transition: background-color 0.3s;
    cursor: pointer;

    &:hover {
        background-color: $button-hover-color;
    }
}





* {
    box-sizing: border-box;
  }
  
  body {
    background-color: #f5f8ff;
    font-family: 'Roboto', sans-serif;
    line-height: 1.5;
    min-block-size: 100vh;
    display: grid;
    place-items: center;
  }
  
  button {
    cursor: pointer;
    font: inherit;
    margin: 0;
    padding: 0;
  }
  
  .button {
    background-color: #404663;
    color: #fff;
    border: 0;
    font-size: 2rem;
    font-weight: 400;
    padding: 0.5em 1.25em;
    border-radius: 0.5em;
    z-index: 999;
    position: relative;
    display: flex;
    gap: 0.5em;
    box-shadow:
      0px 1.7px 2.2px rgba(0, 0, 0, 0.02),
      0px 4px 5.3px rgba(0, 0, 0, 0.028),
      0px 7.5px 10px rgba(0, 0, 0, 0.035),
      0px 13.4px 17.9px rgba(0, 0, 0, 0.042),
      0px 25.1px 33.4px rgba(0, 0, 0, 0.05),
      0px 60px 80px rgba(0, 0, 0, 0.07);
  }
  
  .button:active {
    transform: scale(1.01);
  }


  body {
    background-image: url(./model.svg);
    background-size: cover; /* Adjust as needed */
    background-repeat: no-repeat; /* Adjust as needed */
    margin: 0; /* Remove default margin */
    animation: fadeIn 1s forwards; /* 1s duration, forward fill-mode after animation ends */
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}


.container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 10px;
  width: 90%;
  background-color: rgba(255, 255, 255, 0.863); /* Semi-transparent white background */
  border-radius: 10px; /* Add rounded corners */
  backdrop-filter: blur(10px); /* Frosted glass effect */
}





/* Flip CLock */

$maxSizeBreakpoint: 600px;
$padding: 40px;
$leafBackgroundColor: #f2f2f2;
$leafTextColor: #2d3748;
$leafFontsize: 80px;
$leafFontFamily: "Impact", sans serif;
$leafHeight: 64px;
$leafWidth2Digits: 120px;
$leafWidth3Digits: 148px;
$leafBorderRadius: 6px;
$leafShadowOpacity: 0.8;
$gapSize: 4px;
$foldSize: 2px;
$foldColor: #2d3748;
$perspective: 300px;
$labelFontSize: 14px;
$labelFontFamily: "Geneva", sans serif;
$labelFontWeight: 400;
$labelTextColor: #f2f2f2;
$labelMarginTop: 8px;

$duration: 0.3s;

html {
  box-sizing: border-box;
  background-color: #2d3748;
}

/// Flipclock Looks
.flipclock {
  display: flex;
  justify-content: center;
  padding: $padding;
  box-sizing: border-box;
}

.flipclock * {
  box-sizing: inherit;
}

.leaf {
  display: flex;
  flex-direction: column;
  margin: 0 $gapSize;
  perspective: $perspective;
}

.leaf::after {
  content: attr(data-label);
  position: absolute;
  top: 100%;
  left: 50%;
  margin-top: $labelMarginTop;
  transform: translateX(-10%);

  color: $labelTextColor;
  font-size: $labelFontSize;
  font-weight: $labelFontWeight;
  text-transform: uppercase;
  opacity: 0.5;
}

.top,
.bottom,
.leaf-front,
.leaf-back {
  position: relative;
  display: block;
  height: $leafHeight;
  width: $leafWidth2Digits;
  background-color: $leafBackgroundColor;
  color: $leafTextColor;
  overflow: hidden;
  border-color: $foldColor;

  span {
    position: absolute;
    left: 50%;
    width: 100%;
    height: $leafHeight * 2;
    text-align: center;
    font-family: $leafFontFamily;
    font-size: $leafFontsize;
    line-height: $leafHeight * 2;
    transform: translateX(-50%);
  }
}

.leaf._3-digits {
  .top,
  .bottom,
  .leaf-front,
  .leaf-back {
    width: $leafWidth3Digits;
  }
}

.top,
.leaf-front {
  border-top-left-radius: $leafBorderRadius;
  border-top-right-radius: $leafBorderRadius;
  margin-bottom: ($foldSize / 2);
  border-bottom-style: solid;
  border-bottom-width: ($foldSize / 2);
  
  span {
    top: 0;
  }
}

.leaf-front {
  position: absolute;
  z-index: 10;
}

.bottom,
.leaf-back {
  border-bottom-left-radius: $leafBorderRadius;
  border-bottom-right-radius: $leafBorderRadius;
  border-top-style: solid;
  border-top-width: ($foldSize / 2);
  span {
    bottom: 0;
  }
}

.leaf-back {
  position: absolute;
  top: $leafHeight;
  z-index: 10;
}

@media screen and (max-width: $maxSizeBreakpoint) {
  .flipclock {
    padding: (($padding * 100) / $maxSizeBreakpoint) * 1vw;
  }

  .leaf {
    margin: 0 (($gapSize * 100) / $maxSizeBreakpoint) * 1vw;
  }

  .leaf::after {
    margin-top: (($labelMarginTop * 100) / $maxSizeBreakpoint) * 1vw;
    font-size: (($labelFontSize * 100) / $maxSizeBreakpoint) * 1vw;
  }

  .top,
  .bottom,
  .leaf-front,
  .leaf-back {
    height: (($leafHeight * 100) / $maxSizeBreakpoint) * 1vw;
    width: (($leafWidth2Digits * 100) / $maxSizeBreakpoint) * 1vw;

    span {
      height: (($leafHeight * 100) / $maxSizeBreakpoint) * 1vw * 2;
      font-size: (($leafFontsize * 100) / $maxSizeBreakpoint) * 1vw;
      line-height: (($leafHeight * 100) / $maxSizeBreakpoint) * 1vw * 2;
    }
  }

  .leaf._3-digits {
    .top,
    .bottom,
    .leaf-front,
    .leaf-back {
      width: (($leafWidth3Digits * 100) / $maxSizeBreakpoint) * 1vw;
    }
  }

  .top,
  .leaf-front {
    border-top-left-radius: (($leafBorderRadius * 100) / $maxSizeBreakpoint) *
      1vw;
    border-top-right-radius: (($leafBorderRadius * 100) / $maxSizeBreakpoint) *
      1vw;
   // margin-bottom: ((($foldSize * 100) / $maxSizeBreakpoint) * 1vw / 2);
  }

  .bottom,
  .leaf-back {
    border-bottom-left-radius: (($leafBorderRadius * 100) / $maxSizeBreakpoint) *
      1vw;
    border-bottom-right-radius: (($leafBorderRadius * 100) / $maxSizeBreakpoint) *
      1vw;
    //border-top-width: ((($foldSize * 100) / $maxSizeBreakpoint) * 1vw / 2);
  }

  .leaf-back {
    top: (($leafHeight * 100) / $maxSizeBreakpoint) * 1vw;
  }
}

/// Flipclock Animation
.leaf-front {
  transform-origin: bottom center;
  transform: rotateX(0deg);
  transform-style: preserve-3d;
  transition-delay: $duration;
}

.leaf-back {
  transform-origin: top center;
  transform: rotateX(90deg);
  transform-style: preserve-3d;
  transition-delay: 0s;
}

.bottom::before {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 0%;
  background: rgb(0, 0, 0);
  background: linear-gradient(
    180deg,
    rgba(0, 0, 0, $leafShadowOpacity) 0%,
    rgba(0, 0, 0, 0) 100%
  );
  filter: blur(10px);
}

.flip {
  .leaf-front {
    transform: rotateX(-90deg);
    transition: transform $duration ease-in, background-color $duration ease-in,
      color $duration ease-in;
    transition-delay: 0s;

    color: darken($leafTextColor, 50%);
    background-color: darken($leafBackgroundColor, 50%);
  }
  .leaf-back {
    transform: rotateX(0deg);
    transition: transform $duration ease-in, background-color $duration ease-in,
      color $duration ease-in;
    transition-delay: $duration;
  }

  .bottom::before {
    transition: height $duration ease-in-out;
    transition-delay: $duration / 2;
    height: 100%;
  }
}


.clock{
  position: fixed;
  top: 0%;
}
